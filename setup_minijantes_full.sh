#!/bin/bash

echo "üöÄ Installation compl√®te : MiniJantes-v2 + Neon + GitHub + Vercel"

ZIP_FILE="MiniJantes-v2.zip"
EXTRACT_DIR="MiniJantes-v2"

# === √âtape 1 : D√©compression ===
if [ -f "$ZIP_FILE" ]; then
  echo "üì¶ D√©compression de $ZIP_FILE ..."
  unzip -o "$ZIP_FILE" -d "$EXTRACT_DIR" > /dev/null
  echo "‚úÖ D√©compression termin√©e."
else
  echo "‚ùå Fichier $ZIP_FILE introuvable. Place-le dans ton espace Replit avant de relancer ce script."
  exit 1
fi

cd "$EXTRACT_DIR" || exit

# === √âtape 2 : Cr√©ation base Neon.tech ===
echo "üß† Cr√©ation automatique d'une base PostgreSQL Neon..."
read -p "‚û°Ô∏è  Entre ta cl√© API Neon.tech : " NEON_API_KEY
read -p "‚û°Ô∏è  Nom du projet Neon (ex: minijantes-db) : " PROJECT_NAME

CREATE_RESPONSE=$(curl -s -X POST "https://console.neon.tech/api/v2/projects" \
  -H "Authorization: Bearer $NEON_API_KEY" \
  -H "Content-Type: application/json" \
  -d "{\"name\": \"$PROJECT_NAME\"}")

DB_URL=$(echo $CREATE_RESPONSE | grep -o '"connection_uri":"[^"]*' | cut -d'"' -f4)

if [ -z "$DB_URL" ]; then
  echo "‚ùå √âchec de cr√©ation du projet Neon."
  echo "R√©ponse brute : $CREATE_RESPONSE"
  exit 1
fi

echo "‚úÖ Base PostgreSQL cr√©√©e sur Neon.tech"
echo "üîó URL : $DB_URL"

# === √âtape 3 : Cr√©ation du fichier .env ===
echo "üß© Cr√©ation du fichier .env ..."
cat <<EOF > .env
DATABASE_URL=$DB_URL
DRIZZLE_DATABASE_URL=\${DATABASE_URL}
VITE_API_BASE_URL=https://mini-jantes-backend.vercel.app
VITE_APP_NAME=MiniJantes
VITE_ENV=production
EOF

echo "‚úÖ .env cr√©√©."

# === √âtape 4 : Initialisation Git + GitHub ===
echo "üîß Initialisation Git..."
git init -q
git branch -M main
git add .
git commit -m "Initial commit MiniJantes-v2"

read -p "‚û°Ô∏è  Ton nom d'utilisateur GitHub : " GH_USER
read -p "‚û°Ô∏è  Nom du repo GitHub (ex: mini-jantes-v2) : " GH_REPO

curl -u "$GH_USER" https://api.github.com/user/repos -d "{\"name\":\"$GH_REPO\"}" > /dev/null 2>&1

git remote add origin https://github.com/$GH_USER/$GH_REPO.git
git push -u origin main

echo "‚úÖ Projet envoy√© sur GitHub : https://github.com/$GH_USER/$GH_REPO"

# === √âtape 5 : Cr√©ation + d√©ploiement sur Vercel ===
echo "üåç Cr√©ation automatique du projet Vercel..."
read -p "‚û°Ô∏è  Entre ton token API Vercel : " VERCEL_TOKEN
read -p "‚û°Ô∏è  Nom du projet Vercel (ex: mini-jantes) : " VERCEL_PROJECT

VERCEL_RESPONSE=$(curl -s -X POST "https://api.vercel.com/v13/projects" \
  -H "Authorization: Bearer $VERCEL_TOKEN" \
  -H "Content-Type: application/json" \
  -d "{\"name\": \"$VERCEL_PROJECT\", \"framework\": \"vite\"}")

VERCEL_ID=$(echo $VERCEL_RESPONSE | grep -o '"id":"[^"]*' | cut -d'"' -f4)

if [ -z "$VERCEL_ID" ]; then
  echo "‚ùå Erreur lors de la cr√©ation du projet Vercel."
  echo "R√©ponse : $VERCEL_RESPONSE"
  exit 1
fi

echo "‚úÖ Projet cr√©√© sur Vercel : $VERCEL_PROJECT"

# Lier la base Neon comme variable d‚Äôenvironnement sur Vercel
curl -s -X POST "https://api.vercel.com/v9/projects/$VERCEL_PROJECT/env" \
  -H "Authorization: Bearer $VERCEL_TOKEN" \
  -H "Content-Type: application/json" \
  -d "{\"key\":\"DATABASE_URL\",\"value\":\"$DB_URL\",\"type\":\"encrypted\"}" > /dev/null

echo "üîó DATABASE_URL ajout√©e aux variables d‚Äôenvironnement Vercel."

# Lancer le d√©ploiement via API
DEPLOY_RESPONSE=$(curl -s -X POST "https://api.vercel.com/v13/deployments" \
  -H "Authorization: Bearer $VERCEL_TOKEN" \
  -H "Content-Type: application/json" \
  -d "{\"name\": \"$VERCEL_PROJECT\", \"gitSource\": {\"type\": \"github\", \"repoId\": \"$GH_USER/$GH_REPO\"}}")

VERCEL_URL=$(echo $DEPLOY_RESPONSE | grep -o '"url":"[^"]*' | cut -d'"' -f4)

echo "‚úÖ D√©ploiement lanc√© sur Vercel !"
echo "üåê URL (en attente de build) : https://$VERCEL_URL"

echo ""
echo "üéØ Tout est pr√™t :"
echo "   - Base PostgreSQL Neon : OK"
echo "   - D√©p√¥t GitHub : https://github.com/$GH_USER/$GH_REPO"
echo "   - D√©ploiement Vercel : https://$VERCEL_URL"
echo ""
echo "üöÄ Tu peux suivre le build sur ton dashboard Vercel."