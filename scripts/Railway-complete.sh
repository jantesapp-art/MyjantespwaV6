#!/bin/bash

# üö® Arr√™t √† la moindre erreur
set -e

echo "üîπ D√©but du script Railway-complete.sh"

# 1Ô∏è‚É£ V√©rification des d√©pendances Node.js et npm
if ! command -v node &> /dev/null; then
  echo "Node.js n'est pas install√©. Abort."
  exit 1
fi

if ! command -v npm &> /dev/null; then
  echo "npm n'est pas install√©. Abort."
  exit 1
fi

# 2Ô∏è‚É£ Installation des d√©pendances
echo "üì¶ Installation des d√©pendances npm..."
npm install

# 3Ô∏è‚É£ V√©rification de la variable d'environnement DATABASE_URL
if [ -z "$DATABASE_URL" ]; then
  echo "‚ùå Erreur : DATABASE_URL non d√©fini !"
  echo "Ajoute DATABASE_URL via Railway Variables avant le d√©ploiement."
  exit 1
fi

# 4Ô∏è‚É£ Cr√©ation du fichier .env local
echo "üîß Cr√©ation de .env.local..."
cat > .env.local <<EOL
DATABASE_URL=$DATABASE_URL
PORT=3000
SESSION_SECRET=$(openssl rand -hex 16)
NODE_ENV=production
EOL

# 5Ô∏è‚É£ Build frontend React + Vite
echo "‚ö° Build du frontend React..."
npm run build

# 6Ô∏è‚É£ Ex√©cution des migrations Drizzle
echo "üìä Ex√©cution des migrations Drizzle..."
npx drizzle-kit migrate:dev

# 7Ô∏è‚É£ Cr√©ation d'un admin par d√©faut si non existant
echo "üë§ Cr√©ation de l'admin par d√©faut..."
node -e "
import { pool } from './shared/db.js';
import bcrypt from 'bcrypt';

(async () => {
  const hash = await bcrypt.hash('admin123', 10);
  const res = await pool.query(\"INSERT INTO users (email, password, role) VALUES ('admin@myjantes.com', $1, 'admin') ON CONFLICT (email) DO NOTHING\", [hash]);
  console.log('Admin par d√©faut cr√©√© ou d√©j√† existant.');
  process.exit(0);
})();
"

# 8Ô∏è‚É£ Lancement du backend Node.js en mode production
echo "üöÄ Lancement du serveur Node.js..."
npm run start